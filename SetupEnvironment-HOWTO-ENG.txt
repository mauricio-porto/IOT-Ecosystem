1) Using a local XMPP server (ejabberd) in order to ease the development

  1.1) Settings of the ejabberd configuration file (/etc/ejabberd/ejabberd.cfg)

    1.1.1) Enable the http_bind (aka Bosh) module

      In the session near the listeners definition (we are using the port 5288):

	      {5288, ejabberd_http, [
                         {request_handlers, [
                                             {["jwchat"], mod_http_fileserver}
                         ]},
                         tls, {certfile, "/etc/ejabberd/ejabberd.pem"},
                         http_bind
                        ]}

	      In this case, the "jwchat" handler (javascript client) is not necessary. 
	      This handler is here due it was installed for testing purposes.

    1.1.2) Setup the server hostname, admin user and debug level

	      %% Admin user
	      {acl, admin, {user, "mapo", "poamapo_wrkstn.americas.hpqcorp.net"}}.

	      %% Hostname
	      {hosts, ["poamapo_wrkstn.americas.hpqcorp.net"]}.

	      {loglevel, 5}.

2) Create certificates for a local CA and the XMPP server.
   The server certificate CAN NOT be self-signed since the SSL handshake does not allow self-signed certificates.

    (useful link: http://www.tc.umn.edu/~brams006/selfsign.html)

  2.1) Generate the local CA certificate

	Commands:
	  openssl genrsa -des3 -out ca.key 4096
	    (generates the CA private key - use a "strong" passphrase and keep it safe and easy to find)
	  openssl req -new -x509 -days 730 -key ca.key -out ca.cert
	    (creates the local CA certificate)

	To verify:
	  openssl x509 -noout -text -in ca.cert

  2.2) Issue the requirement for the local server certificate

	Commands:
	  openssl genrsa -des3 -out server.key 4096
	    (generates the server private key - I used the same passphrase as for the CA)
	  openssl req -new -key server.key -out server.csr
	    (generates the request for the server certificate)
	    The CN field (canonical name) MUST be the server hostname (host FQDN)

  2.3) Generate and sign the server certificate request with the local CA key

	Command:
	  openssl x509 -req -days 730 -in server.csr -CA ca.crt -CAkey ca.key -set_serial 01 -out server.crt

  2.4) Export the server private key to a readable format (PEM Base64 encoded)

	Command: openssl rsa -in server.key -out serverDecrypted.key

  2.5) Generate the certificates chain for the ejabberd, including the server certificate, the local CA certificate and
       the server private key

	Command: cat server.crt ca.crt serverDecrypted.key > ejabberd.pem

  2.6) To verify the results:

	Command: openssl x509 -noout -text -in ejabberd.pem

  2.7) Copy the ejabberd.pem file to the ejabberd configuration directory

	Command: sudo cp ejabberd.pem /etc/ejabberd/

  2.8) Restart ejabberd

	Command: sudo /etc/init.d/ejabberd restart

3) In order to allow the use of the Chailet since the Eclipse simulator (speeding up the development cycle), one need to
   add the local server certificate to the Java set of CA certs (keystore)
   (it means to use the javax.net.ssl.SSLSocketFactory class instead of the com.hp.embedded.ssl.ChaiSocketFactory one)

  Useful commands (example):
    keytool -list -keystore /etc/java-1.5.0-sun/security/cacerts
    keytool -printcert -file /local/XMPP/ejabberd.cert
    sudo keytool -import -keystore /etc/java-1.5.0-sun/security/cacerts -storepass changeit -file /local/XMPP/ejabberd.cert
